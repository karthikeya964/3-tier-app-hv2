Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
  PubSub1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: us-east-1a
      MapPublicIpOnLaunch: true
  PriSub1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: us-east-1b
  PubSub2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: us-east-1c
      MapPublicIpOnLaunch: true
  PriSub2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: us-east-1d
  IG:
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IG
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC
  NG:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PubSub1
  PubRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PriRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PubSub1RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSub1
      RouteTableId: !Ref PubRT
  PubSub2RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSub2
      RouteTableId: !Ref PubRT
  PriSub1RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PriSub1
      RouteTableId: !Ref PriRT
  PriSub2RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PriSub2
      RouteTableId: !Ref PriRT
  PubRTRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PubRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IG
  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PriRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref NG
  RDSSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
  EKSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AdministratorAccess
  NodeGroupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
               - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AdministratorAccess
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: EKSCluster
      Version: '1.32'
      RoleArn: !GetAtt EKSRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PubSub1
          - !Ref PriSub1
          - !Ref PubSub2
          - !Ref PriSub2
        EndpointPublicAccess: true
        EndpointPrivateAccess: false
  Nodegroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt NodeGroupRole.Arn
      ScalingConfig:
        MinSize: 2
        DesiredSize: 3
        MaxSize: 4
      Subnets:
        - !Ref PubSub1
        - !Ref PubSub2
        - !Ref PriSub1
        - !Ref PriSub2
  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: Mysql-DB
      DBInstanceClass: db.t3.micro
      AllocatedStorage: '100'
      Engine: MySQL
      EngineVersion: 8.0.36
      MasterUsername: admin
      MasterUserPassword: admin123
      BackupRetentionPeriod: 1
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSG
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Description of subnet group
      SubnetIds:
        - !Ref PriSub1
        - !Ref PriSub2
